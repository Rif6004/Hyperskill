type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    # print('''Starting to make a coffee
    # Grinding coffee beans
    # Boiling water
    # Mixing boiled water with crushed coffee beans
    # Pouring coffee into the cup
    # Pouring some milk into the cup
    # Coffee is ready!''')
    # cup_of_coffees = int(input("Write how many cups of coffee you will need:\n"))
    # print("For",cup_of_coffees,"cups of coffee you will need:")
    # print(cup_of_coffees*200,"ml of water")
    # print(cup_of_coffees*50,"ml of milk")
    # print(cup_of_coffees*15,"g of coffee beans")
    # water = int( input( "Write how many ml of water the coffee machine has:\n" ) )
    # milk = int( input( "Write how many ml of milk the coffee machine has:\n" ) )
    # beans = int( input( "Write how many grams of coffee beans the coffee machine has:\n" ) )
    # cups = int( input( "Write how many cups of coffee you will need:\n" ) )
    # w = 200
    # m = 50
    # b = 15
    # wc = water // w  # wc=no of cups can be made using "water" amount of water
    # mc = milk // m  # mc = no of cups can be made using "milk" amount of milk
    # bc = beans // b # bc = no of cups can be made using "beans" amount of coffe beans
    # cups_can_be_really_made = min(wc,mc,bc)
    # if cups_can_be_really_made == cups:
    #     print("Yes, I can make that amount of coffee")
    # elif cups_can_be_really_made > cups:
    #     N = cups_can_be_really_made - cups
    #     print("Yes, I can make that amount of coffee (and even",N,"more than that)")
    # else:
    #     print("No, I can make only",cups_can_be_really_made,"cups of coffee")

    water = 400  # available amount
    milk = 540
    beans = 120
    dis_cups = 9
    money = 550


    def display():
        global water
        global milk
        global beans
        global dis_cups
        global money
        print("The coffee machine has:")
        print(water, "of water")
        print(milk, " of milk")
        print( beans, "of coffee beans" )
        print( dis_cups, "of disposable cups" )
        print( "$",money, " of money\n",sep ="" )
        return


    def buy(no):
        global water
        global milk
        global beans
        global dis_cups
        global money
        if no == 1:
            if water < 250:
                print("Sorry, not enough water!")
                return
            elif beans < 16:
                print("Sorry, not enough coffee beans!")
                return
            else:
                print("I have enough resources, making you a coffee!")
                water -= 250
                beans -= 16
                money += 4
                dis_cups -= 1
                return
        elif no == 2:
            if water < 350:
                print("Sorry, not enough water!")
                return
            elif beans < 20:
                print("Sorry, not enough coffee beans!")
                return
            elif milk < 75:
                print("Sorry, not enough milk!")
                return
            else:
                print( "I have enough resources, making you a coffee!" )
                water -= 350
                milk -= 75
                beans -= 20
                money += 7
                dis_cups -= 1
                return
        elif no == 3:
            if water < 200:
                print( "Sorry, not enough water!" )
                return
            elif beans < 12:
                print( "Sorry, not enough coffee beans!" )
                return
            elif milk < 100:
                print( "Sorry, not enough milk!" )
                return
            else:
                print( "I have enough resources, making you a coffee!" )
                water -= 200
                milk -= 100
                beans -= 12
                money += 6
                dis_cups -= 1
                return
        else:
            return


    def fill():
        global water
        global milk
        global beans
        global dis_cups
        global money
        w = int( input( "Write how many ml of water do you want to add:\n" ) )
        m = int( input( "Write how many ml of milk do you want to add:\n" ) )
        b = int( input( "Write how many grams of coffee beans do you want to add:\n" ) )
        c = int( input( "Write how many disposable cups of coffee do you want to add:\n" ) )
        water += w
        milk += m
        beans += b
        dis_cups += c
        return



    def take():
        global water
        global milk
        global beans
        global dis_cups
        global money
        print( "I gave you $", money, sep="" )
        money = 0
        return

    action = input( "Write action(buy, fill, take):\n" )
    while action != "exit":
        if action == "buy":

            no = input( "What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\n" )
            if no == "back":
                action = input( "Write action(buy, fill, take):\n" )
                continue
            buy( int(no) )
        elif action == "fill":
            fill()
        elif action == "take":
            take()
        elif action == "remaining":
            display()
        action = input( "Write action(buy, fill, take):\n" )
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
